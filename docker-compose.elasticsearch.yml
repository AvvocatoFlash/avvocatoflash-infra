version: "3.8"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.4
    container_name: elasticsearch
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_SYSTEM_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
    volumes:
        - /srv/logs/elasticsearch:/usr/share/elasticsearch/logs
        - /srv/data/elasticsearch:/usr/share/elasticsearch/data
        - ./entry.sh:/entry.sh
    ports:
      - "9200:9200"
    networks:
      - default
      - elk-net
    entrypoint: /entry.sh

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.4
    container_name: kibana
    hostname: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=none
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/" ]
      interval: 10s      # keep checking every 10 seconds
      timeout: 5s        # fail after 5s if no response
      retries: 10        # after 10 failures, mark as unhealthy
      start_period: 10s  # optional: grace period at container start
    restart: unless-stopped
    networks:
      - default
      - elk-net

  fleet-server:
    image: docker.elastic.co/beats/elastic-agent:8.17.4
    container_name: fleet-server
    hostname: fleet-server
    ports:
      - "8220:8220"
    user: root
    environment:
      - FLEET_FORCE=1
      - FLEET_SERVER_ENABLE=true
      - FLEET_ENROLL=1
      - FLEET_SERVER_ELASTICSEARCH_HOST=http://elasticsearch:9200
      - FLEET_SERVER_ELASTICSEARCH_USERNAME=kibana_admin
      - FLEET_SERVER_ELASTICSEARCH_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN}
      - FLEET_SERVER_POLICY=fleet-server-policy
      - FLEET_URL=https://fleet.avvocatoflash.dev
      - FLEET_INSECURE=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
    restart: unless-stopped
    networks:
      - default
      - elk-net

  elastic-agent-dev:
    image: docker.elastic.co/beats/elastic-agent:8.17.4
    container_name: elastic-agent-avvocatoflash-dev
    user: root
    restart: unless-stopped
    environment:
      - FLEET_ENROLL=1
      - FLEET_URL=https://fleet.avvocatoflash.dev
      - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN_DEV}
      - FLEET_INSECURE=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
    depends_on:
      - fleet-server
    networks:
      - default
      - elk-net

  elastic-agent-prod:
    image: docker.elastic.co/beats/elastic-agent:8.17.4
    container_name: elastic-agent-avvocatoflash-prod
    user: root
    restart: unless-stopped
    environment:
      - FLEET_ENROLL=1
      - FLEET_URL=https://fleet.avvocatoflash.dev
      - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN_PROD}
      - FLEET_INSECURE=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
    depends_on:
      - fleet-server
    networks:
      - default
      - elk-net

volumes:
  es-data:
  es-logs:

networks:
  elk-net:
    name: elk-net
    driver: bridge
  default:
    driver: bridge
